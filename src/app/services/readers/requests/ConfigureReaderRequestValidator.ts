/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
// @ts-ignore
import ConfigureReaderRequest from './ConfigureReaderRequest';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {ConfigureReaderRequest};
export const ConfigureReaderRequestSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "ReaderAttributes": {
      "defaultProperties": [
      ],
      "properties": {
        "firstName": {
          "minLength": 2,
          "type": "string"
        },
        "interests": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lastName": {
          "minLength": 2,
          "type": "string"
        },
        "multiReading": {
          "description": "On the analogy to multi-tasking - aka reading more than one book at a time.",
          "type": "boolean"
        },
        "preferredMedium": {
          "enum": [
            0,
            1,
            2
          ],
          "type": "number"
        },
        "speed": {
          "$ref": "#/definitions/ReadingSpeed"
        }
      },
      "required": [
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "ReadingSpeed": {
      "defaultProperties": [
      ],
      "properties": {
        "section": {
          "$ref": "#/definitions/Section"
        },
        "timeUnit": {
          "$ref": "#/definitions/TimeUnit"
        }
      },
      "required": [
        "section",
        "timeUnit"
      ],
      "type": "object"
    },
    "Section": {
      "enum": [
        0,
        1,
        2
      ],
      "type": "number"
    },
    "TimeUnit": {
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "type": "number"
    }
  },
  "properties": {
    "reader": {
      "$ref": "#/definitions/ReaderAttributes"
    },
    "token": {
      "type": "string"
    },
    "type": {
      "type": "string"
    }
  },
  "required": [
    "reader",
    "token",
    "type"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isConfigureReaderRequest = ajv.compile(ConfigureReaderRequestSchema) as ValidateFunction<ConfigureReaderRequest>;
export default function validate(value: unknown): ConfigureReaderRequest {
  if (isConfigureReaderRequest(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isConfigureReaderRequest.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'ConfigureReaderRequest'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
